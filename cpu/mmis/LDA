#!/bin/bash




###############################################
#
#   MMIX LDA INSTRUCTION.
#
###############################################

#. ./LDxx

#
# Get the parameters for this instruction
#

SIGN=$1  # SIGN
ADDR=$2  # ADDRESS
IregIndex=$3  # 
FLAG=$4
L=`common/parseF $FLAG L`
R=`common/parseF $FLAG R`


##
## TODO: CHECK THE PARAMETERS VALUE.
##
#        SIGN
#        ADDRESS
#        I
#        F
#printparam(){
#echo $S
#echo $ADDR
#echo $I
#echo $F
#echo $L
#echo $R
#}

get_address()
{
	if [ $IregIndex != 0 ];
	then
		#Get the I$I register contents
		rIx4=`cat $CPU_REG_BASE/I$IregIndex/I${IregIndex}4`
		rIx5=`cat $CPU_REG_BASE/I$IregIndex/I${IregIndex}5`
		rflg=`cat $CPU_REG_BASE/I$IregIndex/flag`
	#	if [ $rflg -eq 00 ]; then
	#		Ival=$rIx4$rIx5
	#	else
	#		Ival='-'$rIx4$rIx5
	#	fi
		Ival=$rIx4$rIx5 #ignore the flag temprority.

		if [ $SIGN -eq 00 ]; then
			ADDR=`expr $((((num=16#$Ival))+$ADDR))`
		else
			ADDR=`expr $((((num=16#$Ival))-$ADDR))`
		fi
		ADDR=`echo "obase=16;$ADDR"|bc`
		addrlength=${#ADDR}
		e=`expr $((4-$addrlength))`
		ADDR=`echo 0000 | cut -c 1-$e | sed -e 's/$/'"$ADDR"'/g'`
	fi
}

MEMDATA=
load_mem_data()
{

	# Scan the ADDRESS in MEMORY
	if [ -f $MEM_BASE/$ADDR ];
	then
		echo "LOAD THE DATA FROM $ADDR ."
		
		#Get reg content from source address.
		MEMDATA=`cat $MEM_BASE/$ADDR`
	else
		echo "NOT AN VALID ADDRESS. ($ADDR)"
		exit 1
	fi

}

get_flag()
{
	if [ $L -eq 0 ]; then
		echo $MEMDATA | cut -c 1-2 > "$CPU_REG_BASE/A/flag"
		L=`expr $(($L+1))`
	fi
}

DATA=
do_lda()
{
	echo "LOAD THE DATA FROM $ADDR ."
	
	if [ $FLAG == 0 ];
	then
		exit 0;
	else
		#Calucate the length and get the desired part from the memdata.
		f=`expr $((($L+1)*2 - 1))`
		e=`expr $((($R+1)*2))`
		DATA=`echo $MEMDATA | cut -c $f-$e`
	fi
}

write_data_to_reg()
{
	length=${#DATA}
	i=5;
	while [[ $length -ge 2 ]]
	do
		f=`expr $(($length-1))`
		e=$length
		echo $DATA | cut -c $f-$e > "$CPU_REG_BASE/A/A$i"
		length=`expr $(($length-2))`
		i=`expr $(($i-1))`
	done
}

get_address
load_mem_data
get_flag
do_lda
write_data_to_reg 



